{"version":3,"sources":["webpack:///./src/app/pages/login/dialog-overview-example-dialog.html","webpack:///./src/app/pages/login/login.component.html","webpack:///./src/app/pages/login/Services/login.service.ts","webpack:///./src/app/pages/login/login.component.ts","webpack:///./src/app/pages/login/login.module.ts"],"names":[],"mappings":"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","file":"pages-login-login-module-es2015.js","sourcesContent":["module.exports = \"<h1 mat-dialog-title>Login Error.!</h1>\\r\\n<div mat-dialog-content>\\r\\n  <h4 style=\\\"color: red;\\\">Invalide Email or Pasword</h4>\\r\\n  <!-- <p>What's your favorite animal?</p> -->\\r\\n  <!-- <mat-form-field>\\r\\n    <input matInput tabindex=\\\"1\\\" [(ngModel)]=\\\"data.animal\\\">\\r\\n  </mat-form-field> -->\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n  <button mat-button [mat-dialog-close]=\\\"data.animal\\\" tabindex=\\\"2\\\">Retry</button>\\r\\n  <!-- <button mat-button (click)=\\\"onNoClick()\\\" tabindex=\\\"-1\\\">No Thanks</button> -->\\r\\n</div>\"","module.exports = \"<mat-sidenav-container>\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"h-100\\\">\\r\\n\\r\\n       <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form.value)\\\" fxFlex=\\\"80\\\" fxFlex.gt-sm=\\\"30\\\" fxFlex.sm=\\\"60\\\">\\r\\n\\r\\n            <mat-card class=\\\"p-0 mat-elevation-z24 box\\\">\\r\\n                <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"bg-primary box-header\\\">\\r\\n                    <button mat-fab color=\\\"accent\\\" class=\\\"mat-elevation-z12\\\" (click)=\\\"onSubmit(form.value);\\\">\\r\\n                        <mat-icon>exit_to_app</mat-icon>\\r\\n                    </button>\\r\\n                    <a mat-button routerLink=\\\"/register\\\">Don't have an account? Sign up now!</a>\\r\\n                </div>\\r\\n                <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"box-content\\\">\\r\\n                    <mat-card fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mat-elevation-z12 box-content-inner\\\">\\r\\n                        <span class=\\\"box-content-header\\\">member login</span>  \\r\\n                        <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\r\\n                            <mat-error *ngIf=\\\"form.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\r\\n                            <mat-error *ngIf=\\\"form.controls.password.errors?.required\\\">Password is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.password.hasError('minlength')\\\">Password isn't long enough, minimum of 6 characters</mat-error>\\r\\n                        </mat-form-field> \\r\\n                    </mat-card>\\r\\n                    <button mat-raised-button color=\\\"primary\\\" class=\\\"mat-elevation-z12 box-button\\\" type=\\\"submit\\\" *ngIf=\\\"!Wating_button\\\">SIGN IN</button>\\r\\n                    <button mat-raised-button color=\\\"warn\\\" class=\\\"mat-elevation-z12 box-button\\\"  *ngIf=\\\"Wating_button\\\">Waitting..</button>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            \\r\\n        </form>    \\r\\n  \\r\\n  </div>\\r\\n\\r\\n</mat-sidenav-container>\"","import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class LoginService {\n\n  // url =\"https://crmarchiz.herokuapp.com/login\";\n  // url = \"https://crmosum.in/api/login/login\"\n  url = \"https://newcrmapi.herokuapp.com/api/signin\"\n  tokenVal: any;\n  tokenVal2: any;\n\n  constructor(private http: HttpClient) { }\n\n  login_crm(userdata) {\n    return this.http.post(this.url, userdata);\n  }\n}\n","import { Component ,Inject} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { emailValidator } from '../../theme/utils/app-validators';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\nimport { LoginService } from './Services/login.service';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html'\r\n})\r\n\r\nexport class LoginComponent {\r\n  public animal: string;\r\n  public name: string;\r\n  public users: any;\r\n  public Wating_button : boolean = false;\r\n  public form: FormGroup;\r\n  public settings: Settings;\r\n  constructor(public appSettings: AppSettings,public snackBar: MatSnackBar,\r\n     private loginservice: LoginService, public fb: FormBuilder,\r\n     public dialog: MatDialog,\r\n      public router: Router) {\r\n    this.settings = this.appSettings.settings;\r\n    this.form = this.fb.group({\r\n      'email': [null, Validators.compose([Validators.required, emailValidator])],\r\n      'password': [null, Validators.compose([Validators.required, Validators.minLength(6)])]\r\n    });\r\n  }\r\n  public onSubmit(values: Object): void {\r\n    this.Wating_button = true;\r\n    if (this.form.valid) {\r\n      let userdata = ({\r\n        email: this.form.value.email,\r\n        password: this.form.value.password,\r\n      })\r\n      // const formData = new FormData();\r\n      // formData.append('email', this.form.value.email);\r\n      // formData.append('password', this.form.value.password);\r\n      this.loginservice.login_crm(userdata).subscribe((res: any) => {\r\n        this.users = res;\r\n        console.log(this.users)\r\n        if (this.users.token) {\r\n          localStorage.setItem('Token', this.users.token);\r\n          if (this.users.status == 200 && this.users.error == false) {\r\n            let message = \"Login Successfull.!\";\r\n            let action =\"OK\"\r\n            this.snackBar.open(message, action, {\r\n              duration: 2000,\r\n            });\r\n            this.Wating_button = false;\r\n            this.router.navigate(['/dashboard']);\r\n          }else{\r\n            \r\n          }\r\n        } else {\r\n          // this.router.navigate(['/error']);\r\n          let dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\r\n            data: { name: this.name, animal: this.animal }\r\n          });\r\n      \r\n          dialogRef.afterClosed().subscribe(result => {\r\n            console.log('The dialog was closed');\r\n            this.Wating_button = false;\r\n            this.animal = result;\r\n          });\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.settings.loadingSpinner = false;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'dialog-overview-example-dialog',\r\n  templateUrl: 'dialog-overview-example-dialog.html',\r\n})\r\nexport class DialogOverviewExampleDialog {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogOverviewExampleDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n    // this.Wating_button = false;\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { LoginComponent ,DialogOverviewExampleDialog } from './login.component';\r\nimport { LoginService } from './Services/login.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nexport const routes = [\r\n  { path: '', component: LoginComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule, \r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [LoginComponent ,DialogOverviewExampleDialog],\r\n  entryComponents: [\r\n    DialogOverviewExampleDialog,\r\n  ],\r\n  providers: [LoginService]\r\n})\r\nexport class LoginModule { }"],"sourceRoot":""}